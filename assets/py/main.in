from flask import Flask, render_template, request, jsonify
import openai

app = Flask(__name__)

# Set your OpenAI API key
openai.api_key = "YOUR_OPENAI_API_KEY"

@app.route("/")
def index():
    return render_template("index.html")

@app.route("/ask", methods=["POST"])
def ask():
    data = request.get_json()
    user_message = data.get("message", "")

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "system", "content": "You are JARVIS, a witty AI assistant."},
                      {"role": "user", "content": user_message}]
        )
        reply = response.choices[0].message["content"].strip()
        return jsonify({"response": reply})
    except Exception as e:
        return jsonify({"response": f"Error: {str(e)}"})

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000, debug=True)
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>J.A.R.V.I.S. - AI Assistant</title>
  <link rel="stylesheet" href="/static/style.css">
</head>
<body>
  <audio id="bg-music" autoplay loop>
    <source src="/static/jarvis-theme.mp3" type="audio/mpeg">
  </audio>

  <div class="container">
    <h1>J.A.R.V.I.S. AI Assistant</h1>
    <div class="chat-box" id="chat-box"></div>
    <input type="text" id="user-input" placeholder="Speak or type here...">
    <button id="send-button">Send</button>
    <button id="voice-button">ðŸŽ¤</button>
  </div>

  <script src="/static/script.js"></script>
</body>
</html>
body {
  background-color: black;
  color: cyan;
  font-family: 'Orbitron', sans-serif;
  text-align: center;
}
.container {
  margin-top: 20px;
}
.chat-box {
  border: 2px solid cyan;
  height: 400px;
  overflow-y: auto;
  margin: 10px auto;
  width: 80%;
  padding: 10px;
}
.user-message {
  color: lime;
  text-align: right;
}
.bot-message {
  color: cyan;
  text-align: left;
}
button {
  background: cyan;
  color: black;
  padding: 10px;
  margin: 5px;
  border: none;
  cursor: pointer;
}
document.getElementById('send-button').addEventListener('click', sendMessage);
document.getElementById('voice-button').addEventListener('click', startVoiceInput);

window.onload = () => {
    speakText("Hello sir, JARVIS online and ready.");
};

function sendMessage() {
    const input = document.getElementById('user-input');
    const message = input.value.trim();
    if (!message) return;

    const chatBox = document.getElementById('chat-box');
    const userBubble = document.createElement('div');
    userBubble.className = 'user-message';
    userBubble.textContent = message;
    chatBox.appendChild(userBubble);

    input.value = '';

    fetch('/ask', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ message })
    })
    .then(res => res.json())
    .then(data => {
        const botBubble = document.createElement('div');
        botBubble.className = 'bot-message';
        botBubble.textContent = data.response;
        chatBox.appendChild(botBubble);
        chatBox.scrollTop = chatBox.scrollHeight;

        speakText(data.response);
    })
    .catch(() => {
        const errorBubble = document.createElement('div');
        errorBubble.className = 'bot-message';
        errorBubble.textContent = "Error: Cannot reach AI server.";
        chatBox.appendChild(errorBubble);
    });
}

function startVoiceInput() {
    if (!('webkitSpeechRecognition' in window)) {
        alert('Speech recognition not supported in this browser.');
        return;
    }
    const recognition = new webkitSpeechRecognition();
    recognition.lang = 'en-US';
    recognition.start();
    recognition.onresult = (event) => {
        const transcript = event.results[0][0].transcript;
        document.getElementById('user-input').value = transcript;
        sendMessage();
    };
}

function speakText(text) {
    const speech = new SpeechSynthesisUtterance(text);
    speech.lang = 'en-IN';
    speech.pitch = 0.6;
    speech.rate = 1;
    speech.voice = speechSynthesis.getVoices().find(v => v.name.includes('Male') || v.name.includes('Arjun'));
    speechSynthesis.speak(speech);
}
